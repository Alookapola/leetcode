class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        # 首先，找到max_profit的一段，肯定是从之前的最低开始
        low = 100000
        max_profit1 = 0

        n = len(prices)
        for i in range(n):
            price = prices[i]
            if price < low: # 再创新低
                low = price
                open_pos = i
            else:
                profit = price - low
                if profit > max_profit1:
                    max_profit1 = profit
                    pos_pair = [open_pos, i] # open-close pair

        if max_profit1 == 0:
            return 0

        # 左右两端分别计算，注意边界条件
        low = 100000
        max_profit2 = 0
        for item in prices[:pos_pair[0]]:
            if item < low: # 再创新低
                low = item
            else:
                profit = item - low
                if profit > max_profit2:
                    max_profit2 = profit
        
        low = 100000
        for item in prices[pos_pair[1]+1:]:
            if item < low: # 再创新低
                low = item
            else:
                profit = item - low
                if profit > max_profit2:
                    max_profit2 = profit

        return max_profit1 + max_profit2
        
        # 有问题

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        # idea: (5 - 0) + (4 - 1) = 5 - (0 - (4 - 1))
        # decompose the return：值得品味
        # 四个标记: cost1, profit1, cost2, profit2

        cost1 = 100000
        profit1 = 0
        cost2 = 100000
        profit2 = 0

        for price in prices:
            cost1 = min(cost1, price)
            profit1 = max(profit1, price - cost1)
            cost2 = min(cost2, price - profit1)
            profit2 = max(profit2, price - cost2)

        return profit2
        
        # 这种做法拆分收益到四个部分，DP最大回撤的直接推广
